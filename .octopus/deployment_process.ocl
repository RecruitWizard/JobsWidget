step "Deploy Kubernetes containers" {
    properties = {
        Octopus.Action.TargetRoles = "k8s_apps"
    }

    action {
        action_type = "Octopus.KubernetesDeployContainers"
        notes = "Deploys the website to the cluster"
        properties = {
            Octopus.Action.EnabledFeatures = "Octopus.Features.KubernetesService,Octopus.Features.KubernetesIngress"
            Octopus.Action.KubernetesContainers.CombinedVolumes = "[]"
            Octopus.Action.KubernetesContainers.Containers = "[{\"Name\":\"jobs-widget\",\"Ports\":[],\"EnvironmentVariables\":[],\"SecretEnvironmentVariables\":[],\"ConfigMapEnvironmentVariables\":[],\"FieldRefEnvironmentVariables\":[],\"ConfigMapEnvFromSource\":[],\"SecretEnvFromSource\":[{\"key\":\"#{Octopus.Action.KubernetesContainers.SecretName}-#{Octopus.Deployment.Id | ToLower}\",\"value\":\"\",\"option\":\"False\",\"keyError\":null}],\"VolumeMounts\":[],\"Resources\":{\"requests\":{\"memory\":\"\",\"cpu\":\"\",\"ephemeralStorage\":\"\"},\"limits\":{\"memory\":\"\",\"cpu\":\"\",\"ephemeralStorage\":\"\",\"nvidiaGpu\":\"\",\"amdGpu\":\"\"}},\"LivenessProbe\":{\"failureThreshold\":\"\",\"initialDelaySeconds\":\"\",\"periodSeconds\":\"\",\"successThreshold\":\"\",\"timeoutSeconds\":\"\",\"type\":null,\"exec\":{\"command\":[]},\"httpGet\":{\"host\":\"\",\"path\":\"\",\"port\":\"\",\"scheme\":\"\",\"httpHeaders\":[]},\"tcpSocket\":{\"host\":\"\",\"port\":\"\"}},\"ReadinessProbe\":{\"failureThreshold\":\"\",\"initialDelaySeconds\":\"\",\"periodSeconds\":\"\",\"successThreshold\":\"\",\"timeoutSeconds\":\"\",\"type\":null,\"exec\":{\"command\":[]},\"httpGet\":{\"host\":\"\",\"path\":\"\",\"port\":\"\",\"scheme\":\"\",\"httpHeaders\":[]},\"tcpSocket\":{\"host\":\"\",\"port\":\"\"}},\"StartupProbe\":{\"failureThreshold\":\"\",\"initialDelaySeconds\":\"\",\"periodSeconds\":\"\",\"successThreshold\":\"\",\"timeoutSeconds\":\"\",\"type\":null,\"exec\":{\"command\":[]},\"httpGet\":{\"host\":\"\",\"path\":\"\",\"port\":\"\",\"scheme\":\"\",\"httpHeaders\":[]},\"tcpSocket\":{\"host\":\"\",\"port\":\"\"}},\"Command\":[],\"Args\":[],\"InitContainer\":\"False\",\"SecurityContext\":{\"allowPrivilegeEscalation\":\"\",\"privileged\":\"\",\"readOnlyRootFilesystem\":\"\",\"runAsGroup\":\"\",\"runAsNonRoot\":\"\",\"runAsUser\":\"\",\"capabilities\":{\"add\":[],\"drop\":[]},\"seLinuxOptions\":{\"level\":\"\",\"role\":\"\",\"type\":\"\",\"user\":\"\"}},\"Lifecycle\":{},\"CreateFeedSecrets\":\"True\"}]"
            Octopus.Action.KubernetesContainers.DeploymentAnnotations = "[]"
            Octopus.Action.KubernetesContainers.DeploymentLabels = "{}"
            Octopus.Action.KubernetesContainers.DeploymentName = "#{Octopus.Environment.Name | ToLower}-#{ServiceName}"
            Octopus.Action.KubernetesContainers.DeploymentResourceType = "Deployment"
            Octopus.Action.KubernetesContainers.DeploymentStyle = "BlueGreen"
            Octopus.Action.KubernetesContainers.DeploymentWait = "Wait"
            Octopus.Action.KubernetesContainers.DnsConfigOptions = "[]"
            Octopus.Action.KubernetesContainers.IngressAnnotations = "[{\"key\":\"nginx.ingress.kubernetes.io/proxy-body-size\",\"keyError\":null,\"value\":\"50m\",\"valueError\":null,\"option\":\"\",\"optionError\":null,\"option2\":\"\",\"option2Error\":null}]"
            Octopus.Action.KubernetesContainers.IngressClassName = "nginx"
            Octopus.Action.KubernetesContainers.IngressName = "#{Octopus.Environment.Name | ToLower}-#{ServiceName}"
            Octopus.Action.KubernetesContainers.IngressRules = "[{\"host\":\"#{WebsiteUrl}\",\"http\":{\"paths\":[{\"key\":\"/\",\"value\":\"http\",\"option\":\"placeholder\",\"option2\":\"ImplementationSpecific\"}]}}]"
            Octopus.Action.KubernetesContainers.IngressTlsCertificates = "[{\"hosts\":[\"#{WebsiteUrl}\"],\"secretName\":null,\"certificateVariableName\":\"Certificate-RecruitWizard\"}]"
            Octopus.Action.KubernetesContainers.Namespace = "#{Octopus.Environment.Name | ToLower}"
            Octopus.Action.KubernetesContainers.NodeAffinity = "[]"
            Octopus.Action.KubernetesContainers.PersistentVolumeClaims = "[]"
            Octopus.Action.KubernetesContainers.PodAffinity = "[]"
            Octopus.Action.KubernetesContainers.PodAnnotations = "[]"
            Octopus.Action.KubernetesContainers.PodAntiAffinity = "[]"
            Octopus.Action.KubernetesContainers.PodManagementPolicy = "OrderedReady"
            Octopus.Action.KubernetesContainers.PodSecuritySysctls = "[]"
            Octopus.Action.KubernetesContainers.Replicas = "#{Replicas}"
            Octopus.Action.KubernetesContainers.SecretName = "appsettings-secrets"
            Octopus.Action.KubernetesContainers.SecretValues = "{\"DatabasesRecruiter\":\"#{DatabaseConnectionString-Recruiter}\",\"AzureFilesConnectionString\":\"#{AzureFilesConnectionString}\",\"DatabasesTSM4\":\"#{DatabaseConnectionString-TSM4}\",\"DatabasesControls\":\"#{DatabaseConnectionString-Controls}\",\"DatabasesJPS\":\"#{DatabaseConnectionString-JPS}\",\"DatabasesQueues\":\"#{DatabaseConnectionString-Queues}\",\"ElasticSearchServers\":\"#{ElasticSearchServers}\"}"
            Octopus.Action.KubernetesContainers.ServiceName = "#{Octopus.Environment.Name | ToLower}-#{ServiceName}"
            Octopus.Action.KubernetesContainers.ServiceNameType = "External"
            Octopus.Action.KubernetesContainers.ServicePorts = "[{\"name\":\"http\",\"port\":\"3000\",\"targetPort\":\"\",\"nodePort\":\"\",\"protocol\":\"TCP\"}]"
            Octopus.Action.KubernetesContainers.ServiceType = "ClusterIP"
            Octopus.Action.KubernetesContainers.Tolerations = "[]"
        }
        worker_pool = "Windows Server Core 2019"

        packages "jobs-widget" {
            acquisition_location = "NotAcquired"
            feed = "Wizardsoft Docker Feed"
            package_id = "jobs-widget"
        }
    }
}

step "Microsoft Teams - Post a message" {

    action {
        properties = {
            Body = <<-EOT
                #{Octopus.Release.Notes}
                
                For more information, please see [deployment details](#{Octopus.Web.ServerUri}#{Octopus.Web.DeploymentLink})!
            EOT
            HookUrl = "#{MicrosoftTeamsBuildNotifications}"
            Octopus.Action.Template.Id = "ActionTemplates-1"
            Octopus.Action.Template.Version = "17"
            Timeout = "60"
            Title = "#{Octopus.Project.Name} release #{Octopus.Release.Number} to #{Octopus.Environment.Name} (Kubernetes Cluster - #{Replicas} Pods)"
        }
        worker_pool = "Windows Server Core 2019"
    }
}